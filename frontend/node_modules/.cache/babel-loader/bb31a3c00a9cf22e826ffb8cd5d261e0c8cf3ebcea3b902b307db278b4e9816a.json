{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\RSE\\\\frontend\\\\src\\\\components\\\\Statistics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';\nimport { fetchActions } from '../services/api';\nimport './Statistics.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Statistics = () => {\n  _s();\n  const [selectedKpi, setSelectedKpi] = useState('actions');\n  const [timeRange, setTimeRange] = useState('month');\n  const [actions, setActions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    loadActions();\n  }, []);\n  const loadActions = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchActions();\n      const actionsData = response.data;\n      setActions(actionsData);\n    } catch (err) {\n      console.error(\"Erreur lors du chargement des actions:\", err);\n      setError(\"Impossible de charger les données\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Calcul des données réelles à partir des actions\n  const getActionStatusData = () => {\n    const statusCount = {\n      'planifié': 0,\n      'en_cours': 0,\n      'terminé': 0\n    };\n    actions.forEach(action => {\n      if (statusCount.hasOwnProperty(action.statut)) {\n        statusCount[action.statut]++;\n      }\n    });\n    return [{\n      name: 'Planifiées',\n      value: statusCount.planifié\n    }, {\n      name: 'En cours',\n      value: statusCount['en_cours']\n    }, {\n      name: 'Terminées',\n      value: statusCount.terminé\n    }];\n  };\n\n  // Calcul des indicateurs de performance\n  const calculateKpis = () => {\n    const totalActions = actions.length;\n    const completedActions = actions.filter(a => a.statut === \"terminé\").length;\n    const completionRate = totalActions > 0 ? Math.round(completedActions / totalActions * 100) : 0;\n\n    // Calcul du taux de participation moyen (simulé car pas de données directes dans la BD)\n    // Dans une vraie application, vous devriez avoir une table de participation\n    const participationRate = Math.min(100, Math.max(60, Math.round(completionRate * 0.8)));\n    return {\n      participationRate,\n      completionRate,\n      totalActions,\n      completedActions\n    };\n  };\n  const actionStatusData = getActionStatusData();\n  const kpis = calculateKpis();\n  const COLORS = ['#00C49F', '#FFBB28', '#FF8042'];\n\n  // Données pour le graphique de participation (basé sur le mois de création)\n  const getParticipationData = () => {\n    // Grouper les actions par mois\n    const actionsByMonth = {};\n    actions.forEach(action => {\n      if (action.date_debut) {\n        const month = new Date(action.date_debut).toLocaleString('fr-FR', {\n          month: 'short'\n        });\n        if (!actionsByMonth[month]) {\n          actionsByMonth[month] = 0;\n        }\n        // Simuler un taux de participation (dans une vraie app, utilisez les données réelles)\n        actionsByMonth[month] += Math.floor(Math.random() * 20) + 70; // Valeur entre 70 et 90\n      }\n    });\n    return Object.keys(actionsByMonth).map(month => ({\n      name: month,\n      participation: actionsByMonth[month]\n    }));\n  };\n  const participationData = getParticipationData();\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Chargement des statistiques...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"statistics\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistiques et Indicateurs de Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedKpi,\n        onChange: e => setSelectedKpi(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"actions\",\n          children: \"R\\xE9partition des actions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"participation\",\n          children: \"Taux de participation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: timeRange,\n        onChange: e => setTimeRange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"month\",\n          children: \"Mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quarter\",\n          children: \"Trimestre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"year\",\n          children: \"Ann\\xE9e\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-container\",\n      children: [selectedKpi === 'participation' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Taux de participation aux actions RSE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: participationData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"participation\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), selectedKpi === 'actions' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9partition des actions par statut\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: actionStatusData,\n              cx: \"50%\",\n              cy: \"50%\",\n              labelLine: false,\n              label: ({\n                name,\n                percent\n              }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n              outerRadius: 80,\n              fill: \"#8884d8\",\n              dataKey: \"value\",\n              children: actionStatusData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kpi-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"R\\xE9sum\\xE9 des indicateurs cl\\xE9s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kpi-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kpi-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Taux de participation moyen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"kpi-value\",\n            children: [kpis.participationRate, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"kpi-trend positive\",\n            children: \"+5% vs mois dernier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kpi-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Actions r\\xE9alis\\xE9es\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"kpi-value\",\n            children: [kpis.completedActions, \"/\", kpis.totalActions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"kpi-trend\",\n            children: [kpis.completionRate, \"% du plan annuel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kpi-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Nouveaux participants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"kpi-value\",\n            children: Math.round(kpis.totalActions * 3.5)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"kpi-trend positive\",\n            children: \"+15% vs trimestre dernier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Exporter les donn\\xE9es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        children: \"G\\xE9n\\xE9rer un rapport\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Statistics, \"kOd50ZBcly1HQgCH5Qss2UeAouk=\");\n_c = Statistics;\nexport default Statistics;\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell } from 'recharts';\r\n\r\nconst Statistics = () => {\r\n  const [selectedKpi, setSelectedKpi] = useState('participation');\r\n  const [timeRange, setTimeRange] = useState('month');\r\n\r\n  // Données simulées pour les graphiques\r\n  const participationData = [\r\n    { name: 'Jan', participation: 65 },\r\n    { name: 'Fév', participation: 70 },\r\n    { name: 'Mar', participation: 75 },\r\n    { name: 'Avr', participation: 80 },\r\n    { name: 'Mai', participation: 78 },\r\n    { name: 'Juin', participation: 82 }\r\n  ];\r\n\r\n  const actionStatusData = [\r\n    { name: 'Terminées', value: 12 },\r\n    { name: 'En cours', value: 5 },\r\n    { name: 'Planifiées', value: 7 }\r\n  ];\r\n\r\n  const COLORS = ['#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <h1>Statistiques et Indicateurs de Performance</h1>\r\n      \r\n      <div className=\"stats-controls\">\r\n        <select value={selectedKpi} onChange={(e) => setSelectedKpi(e.target.value)}>\r\n          <option value=\"participation\">Taux de participation</option>\r\n          <option value=\"actions\">Répartition des actions</option>\r\n          <option value=\"impact\">Impact environnemental</option>\r\n        </select>\r\n        \r\n        <select value={timeRange} onChange={(e) => setTimeRange(e.target.value)}>\r\n          <option value=\"week\">Semaine</option>\r\n          <option value=\"month\">Mois</option>\r\n          <option value=\"quarter\">Trimestre</option>\r\n          <option value=\"year\">Année</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"charts-container\">\r\n        {selectedKpi === 'participation' && (\r\n          <div className=\"chart\">\r\n            <h2>Taux de participation aux actions RSE</h2>\r\n            <BarChart width={600} height={300} data={participationData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"participation\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n          </div>\r\n        )}\r\n\r\n        {selectedKpi === 'actions' && (\r\n          <div className=\"chart\">\r\n            <h2>Répartition des actions par statut</h2>\r\n            <PieChart width={400} height={300}>\r\n              <Pie\r\n                data={actionStatusData}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                outerRadius={80}\r\n                fill=\"#8884d8\"\r\n                dataKey=\"value\"\r\n              >\r\n                {actionStatusData.map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip />\r\n              <Legend />\r\n            </PieChart>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"kpi-summary\">\r\n        <h2>Résumé des indicateurs clés</h2>\r\n        <div className=\"kpi-cards\">\r\n          <div className=\"kpi-card\">\r\n            <h3>Taux de participation moyen</h3>\r\n            <p className=\"kpi-value\">75%</p>\r\n            <span className=\"kpi-trend positive\">+5% vs mois dernier</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Actions réalisées</h3>\r\n            <p className=\"kpi-value\">12/24</p>\r\n            <span className=\"kpi-trend\">50% du plan annuel</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Nouveaux participants</h3>\r\n            <p className=\"kpi-value\">45</p>\r\n            <span className=\"kpi-trend positive\">+15% vs trimestre dernier</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"export-section\">\r\n        <button className=\"btn btn-primary\">Exporter les données</button>\r\n        <button className=\"btn btn-secondary\">Générer un rapport</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;*/\nvar _c;\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PieChart","Pie","Cell","ResponsiveContainer","fetchActions","jsxDEV","_jsxDEV","Statistics","_s","selectedKpi","setSelectedKpi","timeRange","setTimeRange","actions","setActions","loading","setLoading","error","setError","loadActions","response","actionsData","data","err","console","getActionStatusData","statusCount","forEach","action","hasOwnProperty","statut","name","value","planifié","terminé","calculateKpis","totalActions","length","completedActions","filter","a","completionRate","Math","round","participationRate","min","max","actionStatusData","kpis","COLORS","getParticipationData","actionsByMonth","date_debut","month","Date","toLocaleString","floor","random","Object","keys","map","participation","participationData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","width","height","strokeDasharray","dataKey","fill","cx","cy","labelLine","label","percent","toFixed","outerRadius","entry","index","_c","$RefreshReg$"],"sources":["C:/wamp64/www/RSE/frontend/src/components/Statistics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';\r\nimport { fetchActions } from '../services/api';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = () => {\r\n  const [selectedKpi, setSelectedKpi] = useState('actions');\r\n  const [timeRange, setTimeRange] = useState('month');\r\n  const [actions, setActions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    loadActions();\r\n  }, []);\r\n\r\n  const loadActions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetchActions();\r\n      const actionsData = response.data;\r\n      setActions(actionsData);\r\n    } catch (err) {\r\n      console.error(\"Erreur lors du chargement des actions:\", err);\r\n      setError(\"Impossible de charger les données\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Calcul des données réelles à partir des actions\r\n  const getActionStatusData = () => {\r\n    const statusCount = {\r\n      'planifié': 0,\r\n      'en_cours': 0,\r\n      'terminé': 0\r\n    };\r\n\r\n    actions.forEach(action => {\r\n      if (statusCount.hasOwnProperty(action.statut)) {\r\n        statusCount[action.statut]++;\r\n      }\r\n    });\r\n\r\n    return [\r\n      { name: 'Planifiées', value: statusCount.planifié },\r\n      { name: 'En cours', value: statusCount['en_cours'] },\r\n      { name: 'Terminées', value: statusCount.terminé }\r\n    ];\r\n  };\r\n\r\n  // Calcul des indicateurs de performance\r\n  const calculateKpis = () => {\r\n    const totalActions = actions.length;\r\n    const completedActions = actions.filter(a => a.statut === \"terminé\").length;\r\n    const completionRate = totalActions > 0 ? Math.round((completedActions / totalActions) * 100) : 0;\r\n    \r\n    // Calcul du taux de participation moyen (simulé car pas de données directes dans la BD)\r\n    // Dans une vraie application, vous devriez avoir une table de participation\r\n    const participationRate = Math.min(100, Math.max(60, Math.round(completionRate * 0.8)));\r\n    \r\n    return {\r\n      participationRate,\r\n      completionRate,\r\n      totalActions,\r\n      completedActions\r\n    };\r\n  };\r\n\r\n  const actionStatusData = getActionStatusData();\r\n  const kpis = calculateKpis();\r\n  const COLORS = ['#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n  // Données pour le graphique de participation (basé sur le mois de création)\r\n  const getParticipationData = () => {\r\n    // Grouper les actions par mois\r\n    const actionsByMonth = {};\r\n    \r\n    actions.forEach(action => {\r\n      if (action.date_debut) {\r\n        const month = new Date(action.date_debut).toLocaleString('fr-FR', { month: 'short' });\r\n        if (!actionsByMonth[month]) {\r\n          actionsByMonth[month] = 0;\r\n        }\r\n        // Simuler un taux de participation (dans une vraie app, utilisez les données réelles)\r\n        actionsByMonth[month] += Math.floor(Math.random() * 20) + 70; // Valeur entre 70 et 90\r\n      }\r\n    });\r\n    \r\n    return Object.keys(actionsByMonth).map(month => ({\r\n      name: month,\r\n      participation: actionsByMonth[month]\r\n    }));\r\n  };\r\n\r\n  const participationData = getParticipationData();\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Chargement des statistiques...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <h1>Statistiques et Indicateurs de Performance</h1>\r\n      \r\n      <div className=\"stats-controls\">\r\n        <select value={selectedKpi} onChange={(e) => setSelectedKpi(e.target.value)}>\r\n          <option value=\"actions\">Répartition des actions</option>\r\n          <option value=\"participation\">Taux de participation</option>\r\n        </select>\r\n        \r\n        <select value={timeRange} onChange={(e) => setTimeRange(e.target.value)}>\r\n          <option value=\"month\">Mois</option>\r\n          <option value=\"quarter\">Trimestre</option>\r\n          <option value=\"year\">Année</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"charts-container\">\r\n        {selectedKpi === 'participation' && (\r\n          <div className=\"chart\">\r\n            <h2>Taux de participation aux actions RSE</h2>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <BarChart data={participationData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Bar dataKey=\"participation\" fill=\"#8884d8\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        )}\r\n\r\n        {selectedKpi === 'actions' && (\r\n          <div className=\"chart\">\r\n            <h2>Répartition des actions par statut</h2>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={actionStatusData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={false}\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                >\r\n                  {actionStatusData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip />\r\n                <Legend />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"kpi-summary\">\r\n        <h2>Résumé des indicateurs clés</h2>\r\n        <div className=\"kpi-cards\">\r\n          <div className=\"kpi-card\">\r\n            <h3>Taux de participation moyen</h3>\r\n            <p className=\"kpi-value\">{kpis.participationRate}%</p>\r\n            <span className=\"kpi-trend positive\">+5% vs mois dernier</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Actions réalisées</h3>\r\n            <p className=\"kpi-value\">{kpis.completedActions}/{kpis.totalActions}</p>\r\n            <span className=\"kpi-trend\">{kpis.completionRate}% du plan annuel</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Nouveaux participants</h3>\r\n            <p className=\"kpi-value\">{Math.round(kpis.totalActions * 3.5)}</p>\r\n            <span className=\"kpi-trend positive\">+15% vs trimestre dernier</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"export-section\">\r\n        <button className=\"btn btn-primary\">Exporter les données</button>\r\n        <button className=\"btn btn-secondary\">Générer un rapport</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell } from 'recharts';\r\n\r\nconst Statistics = () => {\r\n  const [selectedKpi, setSelectedKpi] = useState('participation');\r\n  const [timeRange, setTimeRange] = useState('month');\r\n\r\n  // Données simulées pour les graphiques\r\n  const participationData = [\r\n    { name: 'Jan', participation: 65 },\r\n    { name: 'Fév', participation: 70 },\r\n    { name: 'Mar', participation: 75 },\r\n    { name: 'Avr', participation: 80 },\r\n    { name: 'Mai', participation: 78 },\r\n    { name: 'Juin', participation: 82 }\r\n  ];\r\n\r\n  const actionStatusData = [\r\n    { name: 'Terminées', value: 12 },\r\n    { name: 'En cours', value: 5 },\r\n    { name: 'Planifiées', value: 7 }\r\n  ];\r\n\r\n  const COLORS = ['#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <h1>Statistiques et Indicateurs de Performance</h1>\r\n      \r\n      <div className=\"stats-controls\">\r\n        <select value={selectedKpi} onChange={(e) => setSelectedKpi(e.target.value)}>\r\n          <option value=\"participation\">Taux de participation</option>\r\n          <option value=\"actions\">Répartition des actions</option>\r\n          <option value=\"impact\">Impact environnemental</option>\r\n        </select>\r\n        \r\n        <select value={timeRange} onChange={(e) => setTimeRange(e.target.value)}>\r\n          <option value=\"week\">Semaine</option>\r\n          <option value=\"month\">Mois</option>\r\n          <option value=\"quarter\">Trimestre</option>\r\n          <option value=\"year\">Année</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"charts-container\">\r\n        {selectedKpi === 'participation' && (\r\n          <div className=\"chart\">\r\n            <h2>Taux de participation aux actions RSE</h2>\r\n            <BarChart width={600} height={300} data={participationData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"participation\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n          </div>\r\n        )}\r\n\r\n        {selectedKpi === 'actions' && (\r\n          <div className=\"chart\">\r\n            <h2>Répartition des actions par statut</h2>\r\n            <PieChart width={400} height={300}>\r\n              <Pie\r\n                data={actionStatusData}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                outerRadius={80}\r\n                fill=\"#8884d8\"\r\n                dataKey=\"value\"\r\n              >\r\n                {actionStatusData.map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip />\r\n              <Legend />\r\n            </PieChart>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"kpi-summary\">\r\n        <h2>Résumé des indicateurs clés</h2>\r\n        <div className=\"kpi-cards\">\r\n          <div className=\"kpi-card\">\r\n            <h3>Taux de participation moyen</h3>\r\n            <p className=\"kpi-value\">75%</p>\r\n            <span className=\"kpi-trend positive\">+5% vs mois dernier</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Actions réalisées</h3>\r\n            <p className=\"kpi-value\">12/24</p>\r\n            <span className=\"kpi-trend\">50% du plan annuel</span>\r\n          </div>\r\n          <div className=\"kpi-card\">\r\n            <h3>Nouveaux participants</h3>\r\n            <p className=\"kpi-value\">45</p>\r\n            <span className=\"kpi-trend positive\">+15% vs trimestre dernier</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"export-section\">\r\n        <button className=\"btn btn-primary\">Exporter les données</button>\r\n        <button className=\"btn btn-secondary\">Générer un rapport</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}