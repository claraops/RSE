{"ast":null,"code":"import axios from \"axios\";\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\"\n});\n\n// services/api.js\nexport const fetchActions = async () => {\n  const token = localStorage.getItem(\"token\"); // récupéré après login\n\n  const res = await fetch(\"http://localhost:5000/api/action\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}` // ✅ envoie le token\n    }\n  });\n  if (!res.ok) {\n    throw new Error(\"Erreur API\");\n  }\n  return await res.json();\n};\n\n////////base ****************/\n\n// Intercepteur pour ajouter le token automatiquement\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\"); // Standardisé sur \"token\"\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth\nexport const loginUser = credentials => API.post(\"/auth/login\", credentials);\nexport const registerUser = data => API.post(\"/auth/register\", data);\n\n// Actions RSE\n//export const fetchActions = () => API.get(\"/action\"); // Correction du endpoint (ajout du \"s\")\n//export const createAction = (action) => API.post(\"/action\", action);\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\nexport const deleteAction = id => API.delete(`/action/${id}`);\n\n/*import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\", // ton backend\r\n});\r\n\r\n// Interceptor : ajoute le token à chaque requête si dispo\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"authToken\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => {\r\n  return axios.post(\"http://localhost:5000/api/auth/login\", credentials);\r\n};\r\n\r\n//export const loginUser = (data) => API.post(\"/auth/login\", data);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\n\r\n// Actions protégées\r\nexport const fetchActions = () => API.get(\"/action\");\r\n\r\n\r\n\r\n/***********import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n//const API_URL = 'http://localhost:5000/api/action';\r\n\r\n// Crée une instance Axios configurable\r\nconst api = axios.create({\r\n  baseURL:  API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour ajouter le token JWT aux requêtes\r\napi.interceptors.request.use(config => {\r\n  // Récupère le token du localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await api.get('/action');\r\n  return response.data;\r\n};*******************************\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await api.post('/', action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await api.put(`/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await api.delete(`/${id}`);\r\n  return response.data;\r\n};*/\n\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/action';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Ajoutez les autres fonctions (updateAction, deleteAction) si nécessaire\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/actions';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};*/","map":{"version":3,"names":["axios","API","create","baseURL","fetchActions","token","localStorage","getItem","res","fetch","method","headers","ok","Error","json","interceptors","request","use","config","Authorization","loginUser","credentials","post","registerUser","data","updateAction","id","action","put","deleteAction","delete"],"sources":["C:/wamp64/www/RSE/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n});\r\n\r\n\r\n\r\n// services/api.js\r\nexport const fetchActions = async () => {\r\n  const token = localStorage.getItem(\"token\"); // récupéré après login\r\n\r\n  const res = await fetch(\"http://localhost:5000/api/action\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${token}`   // ✅ envoie le token\r\n    }\r\n  });\r\n\r\n  if (!res.ok) {\r\n    throw new Error(\"Erreur API\");\r\n  }\r\n\r\n  return await res.json();\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////base ****************/\r\n\r\n\r\n// Intercepteur pour ajouter le token automatiquement\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\"); // Standardisé sur \"token\"\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => API.post(\"/auth/login\", credentials);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\n\r\n// Actions RSE\r\n//export const fetchActions = () => API.get(\"/action\"); // Correction du endpoint (ajout du \"s\")\r\n//export const createAction = (action) => API.post(\"/action\", action);\r\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\r\nexport const deleteAction = (id) => API.delete(`/action/${id}`);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\", // ton backend\r\n});\r\n\r\n// Interceptor : ajoute le token à chaque requête si dispo\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"authToken\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => {\r\n  return axios.post(\"http://localhost:5000/api/auth/login\", credentials);\r\n};\r\n\r\n//export const loginUser = (data) => API.post(\"/auth/login\", data);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\n\r\n// Actions protégées\r\nexport const fetchActions = () => API.get(\"/action\");\r\n\r\n\r\n\r\n/***********import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n//const API_URL = 'http://localhost:5000/api/action';\r\n\r\n// Crée une instance Axios configurable\r\nconst api = axios.create({\r\n  baseURL:  API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour ajouter le token JWT aux requêtes\r\napi.interceptors.request.use(config => {\r\n  // Récupère le token du localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await api.get('/action');\r\n  return response.data;\r\n};*******************************\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await api.post('/', action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await api.put(`/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await api.delete(`/${id}`);\r\n  return response.data;\r\n};*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/action';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Ajoutez les autres fonctions (updateAction, deleteAction) si nécessaire\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/actions';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};*/"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAIF;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC1DC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAG;IACvC;EACF,CAAC,CAAC;EAEF,IAAI,CAACG,GAAG,CAACI,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;EAC/B;EAEA,OAAO,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;AACzB,CAAC;;AAQD;;AAGA;AACAb,GAAG,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMb,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTa,MAAM,CAACP,OAAO,CAACQ,aAAa,GAAG,UAAUd,KAAK,EAAE;EAClD;EACA,OAAOa,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,SAAS,GAAIC,WAAW,IAAKpB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;AAC9E,OAAO,MAAME,YAAY,GAAIC,IAAI,IAAKvB,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAEE,IAAI,CAAC;;AAEtE;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,EAAE,EAAEC,MAAM,KAAK1B,GAAG,CAAC2B,GAAG,CAAC,WAAWF,EAAE,EAAE,EAAEC,MAAM,CAAC;AAC5E,OAAO,MAAME,YAAY,GAAIH,EAAE,IAAKzB,GAAG,CAAC6B,MAAM,CAAC,WAAWJ,EAAE,EAAE,CAAC;;AAW/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}