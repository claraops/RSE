{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\RSE\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// util: normalise \"étudiant\" -> \"etudiant\" pour comparer proprement\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst normalizeRole = role => (role || \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null); // { token, role }\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const role = localStorage.getItem(\"role\");\n    if (token && role) {\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n      setUser({\n        token,\n        role\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    const res = await axios.post(\"http://localhost:5000/api/auth/login\", {\n      email,\n      password\n    });\n    const {\n      token,\n      role\n    } = res.data; // backend renvoie { token, role }\n\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"role\", role);\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    setUser({\n      token,\n      role\n    });\n    return {\n      role\n    };\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    delete axios.defaults.headers.common.Authorization;\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser,\n      loading,\n      login,\n      logout,\n      normalizeRole\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l’utilisateur depuis le localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    const { token, user } = response.data;\r\n\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    localStorage.setItem('token', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    setUser(user);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role = \"user\") => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n      nom,\r\n      prenom,\r\n      email,\r\n      password,\r\n      role\r\n    });\r\n\r\n    if (response.data.token && response.data.user) {\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n    }\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, setUser, logout, isAuthenticated: !!user }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n// backend/context/AuthContext.js ou src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Création du contexte\r\nconst AuthContext = createContext();\r\n\r\n// Hook personnalisé pour consommer le contexte\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l'utilisateur depuis localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de la connexion');\r\n    }\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        nom,\r\n        prenom,\r\n        email,\r\n        password,\r\n        role\r\n      });\r\n\r\n      if (response.data.token && response.data.user) {\r\n        const { token, user } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        setUser(user);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de l\\'inscription');\r\n    }\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    localStorage.setItem('token', response.data.token);\r\n    setUser(response.data.user);\r\n    return response.data;\r\n  };\r\n\r\n\r\n  const register = async (nom, prenom, email, password) => {\r\n  const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n    nom,\r\n    prenom,\r\n    email,\r\n    password\r\n  });\r\n  return response.data;\r\n};\r\n\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);*/\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","normalizeRole","role","normalize","replace","toLowerCase","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","defaults","headers","common","Authorization","login","email","password","res","post","data","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/RSE/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst AuthContext = createContext(null);\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// util: normalise \"étudiant\" -> \"etudiant\" pour comparer proprement\r\nconst normalizeRole = (role) =>\r\n  (role || \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // { token, role }\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const role = localStorage.getItem(\"role\");\r\n    if (token && role) {\r\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n      setUser({ token, role });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const res = await axios.post(\"http://localhost:5000/api/auth/login\", {\r\n      email,\r\n      password,\r\n    });\r\n    const { token, role } = res.data; // backend renvoie { token, role }\r\n\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"role\", role);\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    setUser({ token, role });\r\n\r\n    return { role };\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"role\");\r\n    delete axios.defaults.headers.common.Authorization;\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, setUser, loading, login, logout, normalizeRole }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l’utilisateur depuis le localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    const { token, user } = response.data;\r\n\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    localStorage.setItem('token', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    setUser(user);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role = \"user\") => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n      nom,\r\n      prenom,\r\n      email,\r\n      password,\r\n      role\r\n    });\r\n\r\n    if (response.data.token && response.data.user) {\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n    }\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, setUser, logout, isAuthenticated: !!user }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n// backend/context/AuthContext.js ou src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Création du contexte\r\nconst AuthContext = createContext();\r\n\r\n// Hook personnalisé pour consommer le contexte\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l'utilisateur depuis localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de la connexion');\r\n    }\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        nom,\r\n        prenom,\r\n        email,\r\n        password,\r\n        role\r\n      });\r\n\r\n      if (response.data.token && response.data.user) {\r\n        const { token, user } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        setUser(user);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de l\\'inscription');\r\n    }\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    localStorage.setItem('token', response.data.token);\r\n    setUser(response.data.user);\r\n    return response.data;\r\n  };\r\n\r\n\r\n  const register = async (nom, prenom, email, password) => {\r\n  const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n    nom,\r\n    prenom,\r\n    email,\r\n    password\r\n  });\r\n  return response.data;\r\n};\r\n\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);*/"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AACvC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,MAAME,aAAa,GAAIC,IAAI,IACzB,CAACA,IAAI,IAAI,EAAE,EAAEC,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;AAE7E,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMoB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMb,IAAI,GAAGY,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIF,KAAK,IAAIX,IAAI,EAAE;MACjBP,KAAK,CAACqB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,aAAa,GAAG,UAAUN,KAAK,EAAE;MAC/DH,OAAO,CAAC;QAAEG,KAAK;QAAEX;MAAK,CAAC,CAAC;IAC1B;IACAU,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAMC,GAAG,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,sCAAsC,EAAE;MACnEH,KAAK;MACLC;IACF,CAAC,CAAC;IACF,MAAM;MAAET,KAAK;MAAEX;IAAK,CAAC,GAAGqB,GAAG,CAACE,IAAI,CAAC,CAAC;;IAElCX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;IACpCC,YAAY,CAACY,OAAO,CAAC,MAAM,EAAExB,IAAI,CAAC;IAClCP,KAAK,CAACqB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,aAAa,GAAG,UAAUN,KAAK,EAAE;IAC/DH,OAAO,CAAC;MAAEG,KAAK;MAAEX;IAAK,CAAC,CAAC;IAExB,OAAO;MAAEA;IAAK,CAAC;EACjB,CAAC;EAED,MAAMyB,MAAM,GAAGA,CAAA,KAAM;IACnBb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;IAChCd,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAOjC,KAAK,CAACqB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,aAAa;IAClDT,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IACnBC,KAAK,EAAE;MAAErB,IAAI;MAAEC,OAAO;MAAEC,OAAO;MAAES,KAAK;MAAEO,MAAM;MAAE1B;IAAc,CAAE;IAAAM,QAAA,EAE/DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAotQA1B,GAAA,CA/DaF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}