{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\RSE\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const role = localStorage.getItem(\"role\");\n    const userData = localStorage.getItem(\"userData\");\n    if (token && role && userData) {\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n      setUser({\n        token,\n        role,\n        ...JSON.parse(userData)\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password\n      });\n      const {\n        token,\n        role,\n        user: userData\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"role\", role);\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n      setUser({\n        token,\n        role,\n        ...userData\n      });\n      return {\n        role\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"userData\");\n    delete axios.defaults.headers.common.Authorization;\n    setUser(null);\n  };\n  const normalizeRole = role => {\n    if (!role) return \"\";\n    return role.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout,\n      normalizeRole\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l’utilisateur depuis le localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    const { token, user } = response.data;\r\n\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    localStorage.setItem('token', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    setUser(user);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role = \"user\") => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n      nom,\r\n      prenom,\r\n      email,\r\n      password,\r\n      role\r\n    });\r\n\r\n    if (response.data.token && response.data.user) {\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n    }\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, setUser, logout, isAuthenticated: !!user }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n// backend/context/AuthContext.js ou src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Création du contexte\r\nconst AuthContext = createContext();\r\n\r\n// Hook personnalisé pour consommer le contexte\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l'utilisateur depuis localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de la connexion');\r\n    }\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        nom,\r\n        prenom,\r\n        email,\r\n        password,\r\n        role\r\n      });\r\n\r\n      if (response.data.token && response.data.user) {\r\n        const { token, user } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        setUser(user);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de l\\'inscription');\r\n    }\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    localStorage.setItem('token', response.data.token);\r\n    setUser(response.data.user);\r\n    return response.data;\r\n  };\r\n\r\n\r\n  const register = async (nom, prenom, email, password) => {\r\n  const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n    nom,\r\n    prenom,\r\n    email,\r\n    password\r\n  });\r\n  return response.data;\r\n};\r\n\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);*/\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","role","userData","defaults","headers","common","Authorization","JSON","parse","login","email","password","response","post","data","setItem","stringify","error","console","logout","removeItem","normalizeRole","normalize","replace","toLowerCase","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/RSE/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const role = localStorage.getItem(\"role\");\r\n    const userData = localStorage.getItem(\"userData\");\r\n    \r\n    if (token && role && userData) {\r\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n      setUser({ \r\n        token, \r\n        role, \r\n        ...JSON.parse(userData) \r\n      });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      const { token, role, user: userData } = response.data;\r\n      \r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"role\", role);\r\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n      \r\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n      setUser({ token, role, ...userData });\r\n      \r\n      return { role };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"role\");\r\n    localStorage.removeItem(\"userData\");\r\n    delete axios.defaults.headers.common.Authorization;\r\n    setUser(null);\r\n  };\r\n\r\n  const normalizeRole = (role) => {\r\n    if (!role) return \"\";\r\n    return role.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        normalizeRole,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l’utilisateur depuis le localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    const { token, user } = response.data;\r\n\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    localStorage.setItem('token', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    setUser(user);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role = \"user\") => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n      nom,\r\n      prenom,\r\n      email,\r\n      password,\r\n      role\r\n    });\r\n\r\n    if (response.data.token && response.data.user) {\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n    }\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, setUser, logout, isAuthenticated: !!user }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n// backend/context/AuthContext.js ou src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Création du contexte\r\nconst AuthContext = createContext();\r\n\r\n// Hook personnalisé pour consommer le contexte\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Charger l'utilisateur depuis localStorage au démarrage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n\r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Connexion\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      setUser(user);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de la connexion');\r\n    }\r\n  };\r\n\r\n  // Inscription\r\n  const register = async (nom, prenom, email, password, role) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        nom,\r\n        prenom,\r\n        email,\r\n        password,\r\n        role\r\n      });\r\n\r\n      if (response.data.token && response.data.user) {\r\n        const { token, user } = response.data;\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        localStorage.setItem('token', token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        setUser(user);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Erreur lors de l\\'inscription');\r\n    }\r\n  };\r\n\r\n  // Déconnexion\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n    localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    localStorage.setItem('token', response.data.token);\r\n    setUser(response.data.user);\r\n    return response.data;\r\n  };\r\n\r\n\r\n  const register = async (nom, prenom, email, password) => {\r\n  const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n    nom,\r\n    prenom,\r\n    email,\r\n    password\r\n  });\r\n  return response.data;\r\n};\r\n\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}