{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\RSE\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchActions, createAction, updateAction, deleteAction } from './services/api';\nimport ActionCard from './components/ActionCard';\nimport ActionForm from './components/ActionForm';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Application React Fonctionnelle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\n/*\r\nfunction App() {\r\n  const [actions, setActions] = useState([]);\r\n  const [filteredActions, setFilteredActions] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    details: '',\r\n    population: '',\r\n    ressources: '',\r\n    kpi: ''\r\n  });\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Charger les actions au dÃ©marrage\r\n  useEffect(() => {\r\n    const loadActions = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const data = await fetchActions();\r\n        setActions(data);\r\n        setFilteredActions(data);\r\n      } catch (err) {\r\n        setError('Erreur de chargement des actions');\r\n        console.error(err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadActions();\r\n  }, []);\r\n\r\n  // Filtrer les actions\r\n  useEffect(() => {\r\n    const filtered = actions.filter(action => \r\n      action.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      action.details.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredActions(filtered);\r\n  }, [searchTerm, actions]);\r\n\r\n  // Gestion des changements de formulaire\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  // Soumission du formulaire\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      if (editingId) {\r\n        await updateAction(editingId, formData);\r\n        setActions(actions.map(a => \r\n          a.id === editingId ? { ...a, ...formData } : a\r\n        ));\r\n      } else {\r\n        const newAction = await createAction(formData);\r\n        setActions([...actions, newAction]);\r\n      }\r\n      \r\n      resetForm();\r\n    } catch (err) {\r\n      setError(editingId \r\n        ? 'Erreur de mise Ã  jour' \r\n        : 'Erreur de crÃ©ation');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Ã‰dition d'une action\r\n  const handleEdit = (action) => {\r\n    setFormData(action);\r\n    setEditingId(action.id);\r\n    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n  };\r\n\r\n  // Suppression d'une action\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm('Supprimer cette action?')) return;\r\n    \r\n    try {\r\n      await deleteAction(id);\r\n      setActions(actions.filter(a => a.id !== id));\r\n    } catch (err) {\r\n      setError('Erreur de suppression');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Annulation de l'Ã©dition\r\n  const handleCancel = () => {\r\n    resetForm();\r\n  };\r\n\r\n  // RÃ©initialiser le formulaire\r\n  const resetForm = () => {\r\n    setFormData({\r\n      title: '',\r\n      details: '',\r\n      population: '',\r\n      ressources: '',\r\n      kpi: ''\r\n    });\r\n    setEditingId(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <div className=\"header-content\">\r\n          <h1>Plateforme RSE - ECE Paris</h1>\r\n          <SearchBar value={searchTerm} onChange={setSearchTerm} />\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"main-container\">\r\n        <ActionForm \r\n          formData={formData}\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n          onCancel={handleCancel}\r\n          isEditing={!!editingId}\r\n        />\r\n        \r\n        <section className=\"actions-section\">\r\n          <div className=\"section-header\">\r\n            <h2>Actions RSE ({filteredActions.length})</h2>\r\n            <div className=\"section-actions\">\r\n              <button \r\n                className=\"refresh-btn\"\r\n                onClick={() => window.location.reload()}\r\n              >\r\n                ðŸ”„ Actualiser\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {error && <div className=\"error-banner\">{error}</div>}\r\n          \r\n          {isLoading ? (\r\n            <div className=\"loading\">Chargement en cours...</div>\r\n          ) : filteredActions.length === 0 ? (\r\n            <div className=\"empty-state\">\r\n              Aucune action trouvÃ©e. Essayez une autre recherche.\r\n            </div>\r\n          ) : (\r\n            <div className=\"actions-grid\">\r\n              {filteredActions.map(action => (\r\n                <ActionCard\r\n                  key={action.id}\r\n                  action={action}\r\n                  onEdit={handleEdit}\r\n                  onDelete={handleDelete}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </section>\r\n      </main>\r\n      \r\n      <footer className=\"footer\">\r\n        <p>Â© {new Date().getFullYear()} ECE Paris - Projet RSE</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n} \r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchActions","createAction","updateAction","deleteAction","ActionCard","ActionForm","SearchBar","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/RSE/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  fetchActions, \r\n  createAction, \r\n  updateAction, \r\n  deleteAction \r\n} from './services/api';\r\nimport ActionCard from './components/ActionCard';\r\nimport ActionForm from './components/ActionForm';\r\nimport SearchBar from './components/SearchBar';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return <h1>Application React Fonctionnelle</h1>;\r\n}\r\nexport default App;\r\n/*\r\nfunction App() {\r\n  const [actions, setActions] = useState([]);\r\n  const [filteredActions, setFilteredActions] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    details: '',\r\n    population: '',\r\n    ressources: '',\r\n    kpi: ''\r\n  });\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Charger les actions au dÃ©marrage\r\n  useEffect(() => {\r\n    const loadActions = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const data = await fetchActions();\r\n        setActions(data);\r\n        setFilteredActions(data);\r\n      } catch (err) {\r\n        setError('Erreur de chargement des actions');\r\n        console.error(err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadActions();\r\n  }, []);\r\n\r\n  // Filtrer les actions\r\n  useEffect(() => {\r\n    const filtered = actions.filter(action => \r\n      action.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      action.details.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredActions(filtered);\r\n  }, [searchTerm, actions]);\r\n\r\n  // Gestion des changements de formulaire\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  // Soumission du formulaire\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      if (editingId) {\r\n        await updateAction(editingId, formData);\r\n        setActions(actions.map(a => \r\n          a.id === editingId ? { ...a, ...formData } : a\r\n        ));\r\n      } else {\r\n        const newAction = await createAction(formData);\r\n        setActions([...actions, newAction]);\r\n      }\r\n      \r\n      resetForm();\r\n    } catch (err) {\r\n      setError(editingId \r\n        ? 'Erreur de mise Ã  jour' \r\n        : 'Erreur de crÃ©ation');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Ã‰dition d'une action\r\n  const handleEdit = (action) => {\r\n    setFormData(action);\r\n    setEditingId(action.id);\r\n    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n  };\r\n\r\n  // Suppression d'une action\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm('Supprimer cette action?')) return;\r\n    \r\n    try {\r\n      await deleteAction(id);\r\n      setActions(actions.filter(a => a.id !== id));\r\n    } catch (err) {\r\n      setError('Erreur de suppression');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Annulation de l'Ã©dition\r\n  const handleCancel = () => {\r\n    resetForm();\r\n  };\r\n\r\n  // RÃ©initialiser le formulaire\r\n  const resetForm = () => {\r\n    setFormData({\r\n      title: '',\r\n      details: '',\r\n      population: '',\r\n      ressources: '',\r\n      kpi: ''\r\n    });\r\n    setEditingId(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <div className=\"header-content\">\r\n          <h1>Plateforme RSE - ECE Paris</h1>\r\n          <SearchBar value={searchTerm} onChange={setSearchTerm} />\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"main-container\">\r\n        <ActionForm \r\n          formData={formData}\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n          onCancel={handleCancel}\r\n          isEditing={!!editingId}\r\n        />\r\n        \r\n        <section className=\"actions-section\">\r\n          <div className=\"section-header\">\r\n            <h2>Actions RSE ({filteredActions.length})</h2>\r\n            <div className=\"section-actions\">\r\n              <button \r\n                className=\"refresh-btn\"\r\n                onClick={() => window.location.reload()}\r\n              >\r\n                ðŸ”„ Actualiser\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {error && <div className=\"error-banner\">{error}</div>}\r\n          \r\n          {isLoading ? (\r\n            <div className=\"loading\">Chargement en cours...</div>\r\n          ) : filteredActions.length === 0 ? (\r\n            <div className=\"empty-state\">\r\n              Aucune action trouvÃ©e. Essayez une autre recherche.\r\n            </div>\r\n          ) : (\r\n            <div className=\"actions-grid\">\r\n              {filteredActions.map(action => (\r\n                <ActionCard\r\n                  key={action.id}\r\n                  action={action}\r\n                  onEdit={handleEdit}\r\n                  onDelete={handleDelete}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </section>\r\n      </main>\r\n      \r\n      <footer className=\"footer\">\r\n        <p>Â© {new Date().getFullYear()} ECE Paris - Projet RSE</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n} \r\n\r\nexport default App;*/"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,YAAY,QACP,gBAAgB;AACvB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EACb,oBAAOD,OAAA;IAAAE,QAAA,EAAI;EAA+B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACjD;AAACC,EAAA,GAFQN,GAAG;AAGZ,eAAeA,GAAG;AAClignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}