{"ast":null,"code":"import axios from \"axios\";\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\" // ton backend\n});\n\n// Interceptor : ajoute le token à chaque requête si dispo\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"authToken\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth\nexport const loginUser = credentials => {\n  return axios.post(\"http://localhost:5000/api/auth/login\", credentials);\n};\n\n//export const loginUser = (data) => API.post(\"/auth/login\", data);\nexport const registerUser = data => API.post(\"/auth/register\", data);\n\n// Actions protégées\nexport const fetchActions = () => API.get(\"/action\");\n\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n//const API_URL = 'http://localhost:5000/api/action';\r\n\r\n// Crée une instance Axios configurable\r\nconst api = axios.create({\r\n  baseURL:  API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour ajouter le token JWT aux requêtes\r\napi.interceptors.request.use(config => {\r\n  // Récupère le token du localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await api.get('/action');\r\n  return response.data;\r\n};*/\n\nexport const createAction = async action => {\n  const response = await api.post('/', action);\n  return response.data;\n};\nexport const updateAction = async (id, action) => {\n  const response = await api.put(`/${id}`, action);\n  return response.data;\n};\nexport const deleteAction = async id => {\n  const response = await api.delete(`/${id}`);\n  return response.data;\n};\n\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/action';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Ajoutez les autres fonctions (updateAction, deleteAction) si nécessaire\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/actions';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};*/","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","loginUser","credentials","post","registerUser","data","fetchActions","get","createAction","action","response","api","updateAction","id","put","deleteAction","delete"],"sources":["C:/wamp64/www/RSE/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\", // ton backend\r\n});\r\n\r\n// Interceptor : ajoute le token à chaque requête si dispo\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"authToken\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth\r\nexport const loginUser = (credentials) => {\r\n  return axios.post(\"http://localhost:5000/api/auth/login\", credentials);\r\n};\r\n\r\n//export const loginUser = (data) => API.post(\"/auth/login\", data);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\n\r\n// Actions protégées\r\nexport const fetchActions = () => API.get(\"/action\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n//const API_URL = 'http://localhost:5000/api/action';\r\n\r\n// Crée une instance Axios configurable\r\nconst api = axios.create({\r\n  baseURL:  API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour ajouter le token JWT aux requêtes\r\napi.interceptors.request.use(config => {\r\n  // Récupère le token du localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  \r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await api.get('/action');\r\n  return response.data;\r\n};*/\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await api.post('/', action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await api.put(`/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await api.delete(`/${id}`);\r\n  return response.data;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/action';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Ajoutez les autres fonctions (updateAction, deleteAction) si nécessaire\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/actions';\r\n\r\nexport const fetchActions = async () => {\r\n  const response = await axios.get(API_URL);\r\n  return response.data;\r\n};\r\n\r\nexport const createAction = async (action) => {\r\n  const response = await axios.post(API_URL, action);\r\n  return response.data;\r\n};\r\n\r\nexport const updateAction = async (id, action) => {\r\n  const response = await axios.put(`${API_URL}/${id}`, action);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAction = async (id) => {\r\n  const response = await axios.delete(`${API_URL}/${id}`);\r\n  return response.data;\r\n};*/"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B,CAAE;AACxC,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,SAAS,GAAIC,WAAW,IAAK;EACxC,OAAOd,KAAK,CAACe,IAAI,CAAC,sCAAsC,EAAED,WAAW,CAAC;AACxE,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAIC,IAAI,IAAKhB,GAAG,CAACc,IAAI,CAAC,gBAAgB,EAAEE,IAAI,CAAC;;AAEtE;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMjB,GAAG,CAACkB,GAAG,CAAC,SAAS,CAAC;;AAoBpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACR,IAAI,CAAC,GAAG,EAAEM,MAAM,CAAC;EAC5C,OAAOC,QAAQ,CAACL,IAAI;AACtB,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG,MAAAA,CAAOC,EAAE,EAAEJ,MAAM,KAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACG,GAAG,CAAC,IAAID,EAAE,EAAE,EAAEJ,MAAM,CAAC;EAChD,OAAOC,QAAQ,CAACL,IAAI;AACtB,CAAC;AAED,OAAO,MAAMU,YAAY,GAAG,MAAOF,EAAE,IAAK;EACxC,MAAMH,QAAQ,GAAG,MAAMC,GAAG,CAACK,MAAM,CAAC,IAAIH,EAAE,EAAE,CAAC;EAC3C,OAAOH,QAAQ,CAACL,IAAI;AACtB,CAAC;;AAyBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}