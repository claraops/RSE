{"ast":null,"code":"import axios from \"axios\";\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  timeout: 30000 // Augmentez le timeout si nécessaire\n});\n\n// Intercepteur pour ajouter le token\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Intercepteur pour gérer les erreurs\nAPI.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"userData\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\nconst API_URL = \"http://localhost:5000/api\";\n\n// Fonction pour récupérer le token stocké (localStorage ou contexte)\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"token\"); // ou depuis AuthContext\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\nexport const fetchActions = async () => {\n  return await axios.get(`${API_URL}/action`, getAuthHeaders());\n};\nexport const createAction = async data => {\n  return await API.post(\"/action\", data);\n};\nexport const loginUser = credentials => API.post(\"/auth/login\", credentials);\nexport const registerUser = data => API.post(\"/auth/register\", data);\n//export const fetchActions = () => API.get(\"/action\");\n//export const createAction = (action) => API.post(\"/action\", action);\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\nexport const deleteAction = id => API.delete(`/action/${id}`);\n\n/*\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API = axios.create({ baseURL: \"http://localhost:5000/api\" });\r\n\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const loginUser = (credentials) => API.post(\"/auth/login\", credentials);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\nexport const fetchActions = () => API.get(\"/action\");\r\nexport const createAction = (action) => API.post(\"/action\", action);\r\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\r\nexport const deleteAction = (id) => API.delete(`/action/${id}`);\r\n\r\n\r\n*/","map":{"version":3,"names":["axios","API","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","API_URL","getAuthHeaders","fetchActions","get","createAction","data","post","loginUser","credentials","registerUser","updateAction","id","action","put","deleteAction","delete"],"sources":["C:/wamp64/www/RSE/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({ \r\n  baseURL: \"http://localhost:5000/api\",\r\n  timeout: 30000 // Augmentez le timeout si nécessaire\r\n});\r\n\r\n\r\n// Intercepteur pour ajouter le token\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Intercepteur pour gérer les erreurs\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"role\");\r\n      localStorage.removeItem(\"userData\");\r\n      window.location.href = \"/login\";\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Fonction pour récupérer le token stocké (localStorage ou contexte)\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem(\"token\"); // ou depuis AuthContext\r\n  return {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n};\r\n\r\nexport const fetchActions = async () => {\r\n  return await axios.get(`${API_URL}/action`, getAuthHeaders());\r\n};\r\n\r\n\r\nexport const createAction = async (data) => {\r\n  return await API.post(\"/action\", data);\r\n};\r\n\r\n\r\nexport const loginUser = (credentials) => API.post(\"/auth/login\", credentials);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\n//export const fetchActions = () => API.get(\"/action\");\r\n//export const createAction = (action) => API.post(\"/action\", action);\r\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\r\nexport const deleteAction = (id) => API.delete(`/action/${id}`);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API = axios.create({ baseURL: \"http://localhost:5000/api\" });\r\n\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const loginUser = (credentials) => API.post(\"/auth/login\", credentials);\r\nexport const registerUser = (data) => API.post(\"/auth/register\", data);\r\nexport const fetchActions = () => API.get(\"/action\");\r\nexport const createAction = (action) => API.post(\"/action\", action);\r\nexport const updateAction = (id, action) => API.put(`/action/${id}`, action);\r\nexport const deleteAction = (id) => API.delete(`/action/${id}`);\r\n\r\n\r\n*/\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK,CAAC;AACjB,CAAC,CAAC;;AAGF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;IACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMS,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,OAAO;IACLC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMiB,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,OAAO,MAAM1B,KAAK,CAAC2B,GAAG,CAAC,GAAGH,OAAO,SAAS,EAAEC,cAAc,CAAC,CAAC,CAAC;AAC/D,CAAC;AAGD,OAAO,MAAMG,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,OAAO,MAAM5B,GAAG,CAAC6B,IAAI,CAAC,SAAS,EAAED,IAAI,CAAC;AACxC,CAAC;AAGD,OAAO,MAAME,SAAS,GAAIC,WAAW,IAAK/B,GAAG,CAAC6B,IAAI,CAAC,aAAa,EAAEE,WAAW,CAAC;AAC9E,OAAO,MAAMC,YAAY,GAAIJ,IAAI,IAAK5B,GAAG,CAAC6B,IAAI,CAAC,gBAAgB,EAAED,IAAI,CAAC;AACtE;AACA;AACA,OAAO,MAAMK,YAAY,GAAGA,CAACC,EAAE,EAAEC,MAAM,KAAKnC,GAAG,CAACoC,GAAG,CAAC,WAAWF,EAAE,EAAE,EAAEC,MAAM,CAAC;AAC5E,OAAO,MAAME,YAAY,GAAIH,EAAE,IAAKlC,GAAG,CAACsC,MAAM,CAAC,WAAWJ,EAAE,EAAE,CAAC;;AAY/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}