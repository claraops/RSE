{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\RSE\\\\frontend\\\\src\\\\components\\\\Planning.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Planning.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Planning = () => {\n  _s();\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [actions, setActions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchActions();\n  }, []);\n  const getApiBaseUrl = () => {\n    // En développement, utilisez localhost:3001\n    // En production, utilisez le même domaine que le frontend\n    if (process.env.NODE_ENV === 'development') {\n      return 'http://localhost:3001';\n    }\n    return ''; // En production, utilisez des URL relatives\n  };\n  const fetchActions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const apiUrl = `${getApiBaseUrl()}/api/actions`;\n      console.log('Tentative de connexion à:', apiUrl);\n      const response = await fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // timeout après 5 secondes\n        signal: AbortSignal.timeout(5000)\n      });\n      if (!response.ok) {\n        throw new Error(`Erreur HTTP: ${response.status}`);\n      }\n      const data = await response.json();\n      setActions(data);\n    } catch (err) {\n      console.error('Erreur détaillée:', err);\n      if (err.name === 'AbortError') {\n        setError('Le serveur ne répond pas. Vérifiez que le backend est en cours d\\'exécution.');\n      } else if (err.message.includes('Failed to fetch')) {\n        setError('Impossible de se connecter au serveur. Vérifiez votre connexion et que le serveur backend est démarré.');\n      } else {\n        setError(`Erreur lors du chargement: ${err.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\n  const generateYears = () => {\n    const currentYear = new Date().getFullYear();\n    return [currentYear - 1, currentYear, currentYear + 1];\n  };\n  const filteredActions = actions.filter(action => {\n    if (!action.date_debut) return false;\n    const actionDate = new Date(action.date_debut);\n    return actionDate.getMonth() === selectedMonth && actionDate.getFullYear() === selectedYear;\n  });\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planning\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Planning des Actions RSE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Chargement des actions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planning\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Planning des Actions RSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"troubleshooting\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"D\\xE9pannage :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"V\\xE9rifiez que le serveur backend est en cours d'ex\\xE9cution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"V\\xE9rifiez que le serveur \\xE9coute sur le port 3001\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"V\\xE9rifiez votre connexion r\\xE9seau\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchActions,\n        className: \"retry-button\",\n        children: \"R\\xE9essayer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planning-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedMonth,\n          onChange: e => setSelectedMonth(parseInt(e.target.value)),\n          children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: month\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedYear,\n          onChange: e => setSelectedYear(parseInt(e.target.value)),\n          children: generateYears().map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: filteredActions.length > 0 ? filteredActions.map(action => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-event\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-date\",\n            children: new Date(action.date_debut).toLocaleDateString('fr-FR', {\n              day: 'numeric',\n              month: 'long'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: action.titre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `event-status ${action.statut}`,\n              children: action.statut === 'planifié' ? 'Planifiée' : action.statut === 'en_cours' ? 'En cours' : 'Terminée'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"event-description\",\n              children: action.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/action/${action.id}`,\n              className: \"event-link\",\n              children: \"Voir d\\xE9tails\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 19\n          }, this)]\n        }, action.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Aucune action planifi\\xE9e pour \", months[selectedMonth], \" \", selectedYear, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Planning, \"UVwy7haBxOUAw1eLEoKfVS8auek=\");\n_c = Planning;\nexport default Planning;\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Planning.css\";\r\n\r\n\r\nconst Planning = () => {\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [actions, setActions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simulation de données - à remplacer par un appel API\r\n    const mockActions = [\r\n      { id: 1, title: 'Journée de nettoyage', date: '2024-09-15', status: 'planned' },\r\n      { id: 2, title: 'Atelier recyclage', date: '2024-09-22', status: 'planned' },\r\n      { id: 3, title: 'Collecte de vêtements', date: '2024-10-05', status: 'planned' },\r\n      { id: 4, title: 'Conférence sur le développement durable', date: '2024-10-12', status: 'planned' }\r\n    ];\r\n    setActions(mockActions);\r\n  }, []);\r\n\r\n  const months = [\r\n    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',\r\n    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'\r\n  ];\r\n\r\n  const years = [2024, 2025];\r\n\r\n  const filteredActions = actions.filter(action => {\r\n    const actionDate = new Date(action.date);\r\n    return actionDate.getMonth() === selectedMonth && \r\n           actionDate.getFullYear() === selectedYear;\r\n  });\r\n\r\n  return (\r\n    <div className=\"planning\">\r\n      <h1>Planning des Actions RSE</h1>\r\n      \r\n      <div className=\"planning-controls\">\r\n        <select \r\n          value={selectedMonth} \r\n          onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n        >\r\n          {months.map((month, index) => (\r\n            <option key={index} value={index}>{month}</option>\r\n          ))}\r\n        </select>\r\n        \r\n        <select \r\n          value={selectedYear} \r\n          onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n        >\r\n          {years.map(year => (\r\n            <option key={year} value={year}>{year}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"calendar\">\r\n        {filteredActions.length > 0 ? (\r\n          filteredActions.map(action => (\r\n            <div key={action.id} className=\"calendar-event\">\r\n              <div className=\"event-date\">\r\n                {new Date(action.date).getDate()} {months[selectedMonth]}\r\n              </div>\r\n              <div className=\"event-details\">\r\n                <h3>{action.title}</h3>\r\n                <span className={`event-status ${action.status}`}>\r\n                  {action.status === 'planned' ? 'Planifiée' : \r\n                   action.status === 'in-progress' ? 'En cours' : 'Terminée'}\r\n                </span>\r\n                <Link to={`/action/${action.id}`} className=\"event-link\">Voir détails</Link>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>Aucune action planifiée pour cette période.</p>\r\n        )}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planning;  */\nvar _c;\n$RefreshReg$(_c, \"Planning\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Planning","_s","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","actions","setActions","loading","setLoading","error","setError","fetchActions","getApiBaseUrl","process","env","NODE_ENV","apiUrl","console","log","response","fetch","headers","signal","AbortSignal","timeout","ok","Error","status","data","json","err","name","message","includes","months","generateYears","currentYear","filteredActions","filter","action","date_debut","actionDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","parseInt","target","map","month","index","year","length","toLocaleDateString","day","titre","statut","description","to","id","_c","$RefreshReg$"],"sources":["C:/wamp64/www/RSE/frontend/src/components/Planning.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Planning.css\";\r\n\r\nconst Planning = () => {\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [actions, setActions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchActions();\r\n  }, []);\r\n\r\n  const getApiBaseUrl = () => {\r\n    // En développement, utilisez localhost:3001\r\n    // En production, utilisez le même domaine que le frontend\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return 'http://localhost:3001';\r\n    }\r\n    return ''; // En production, utilisez des URL relatives\r\n  };\r\n\r\n  const fetchActions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const apiUrl = `${getApiBaseUrl()}/api/actions`;\r\n      console.log('Tentative de connexion à:', apiUrl);\r\n      \r\n      const response = await fetch(apiUrl, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        // timeout après 5 secondes\r\n        signal: AbortSignal.timeout(5000)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Erreur HTTP: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setActions(data);\r\n    } catch (err) {\r\n      console.error('Erreur détaillée:', err);\r\n      \r\n      if (err.name === 'AbortError') {\r\n        setError('Le serveur ne répond pas. Vérifiez que le backend est en cours d\\'exécution.');\r\n      } else if (err.message.includes('Failed to fetch')) {\r\n        setError('Impossible de se connecter au serveur. Vérifiez votre connexion et que le serveur backend est démarré.');\r\n      } else {\r\n        setError(`Erreur lors du chargement: ${err.message}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const months = [\r\n    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',\r\n    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'\r\n  ];\r\n\r\n  const generateYears = () => {\r\n    const currentYear = new Date().getFullYear();\r\n    return [currentYear - 1, currentYear, currentYear + 1];\r\n  };\r\n\r\n  const filteredActions = actions.filter(action => {\r\n    if (!action.date_debut) return false;\r\n    \r\n    const actionDate = new Date(action.date_debut);\r\n    return actionDate.getMonth() === selectedMonth && \r\n           actionDate.getFullYear() === selectedYear;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"planning\">\r\n        <h1>Planning des Actions RSE</h1>\r\n        <div className=\"loading\">Chargement des actions...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"planning\">\r\n      <h1>Planning des Actions RSE</h1>\r\n      \r\n      {error && (\r\n        <div className=\"error-message\">\r\n          <p>{error}</p>\r\n          <div className=\"troubleshooting\">\r\n            <h3>Dépannage :</h3>\r\n            <ul>\r\n              <li>Vérifiez que le serveur backend est en cours d'exécution</li>\r\n              <li>Vérifiez que le serveur écoute sur le port 3001</li>\r\n              <li>Vérifiez votre connexion réseau</li>\r\n            </ul>\r\n          </div>\r\n          <button onClick={fetchActions} className=\"retry-button\">\r\n            Réessayer\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {!error && (\r\n        <>\r\n          <div className=\"planning-controls\">\r\n            <select \r\n              value={selectedMonth} \r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {months.map((month, index) => (\r\n                <option key={index} value={index}>{month}</option>\r\n              ))}\r\n            </select>\r\n            \r\n            <select \r\n              value={selectedYear} \r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            >\r\n              {generateYears().map(year => (\r\n                <option key={year} value={year}>{year}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"calendar\">\r\n            {filteredActions.length > 0 ? (\r\n              filteredActions.map(action => (\r\n                <div key={action.id} className=\"calendar-event\">\r\n                  <div className=\"event-date\">\r\n                    {new Date(action.date_debut).toLocaleDateString('fr-FR', {\r\n                      day: 'numeric',\r\n                      month: 'long'\r\n                    })}\r\n                  </div>\r\n                  <div className=\"event-details\">\r\n                    <h3>{action.titre}</h3>\r\n                    <span className={`event-status ${action.statut}`}>\r\n                      {action.statut === 'planifié' ? 'Planifiée' : \r\n                      action.statut === 'en_cours' ? 'En cours' : 'Terminée'}\r\n                    </span>\r\n                    <p className=\"event-description\">{action.description}</p>\r\n                    <Link to={`/action/${action.id}`} className=\"event-link\">Voir détails</Link>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>Aucune action planifiée pour {months[selectedMonth]} {selectedYear}.</p>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planning;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Planning.css\";\r\n\r\n\r\nconst Planning = () => {\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [actions, setActions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simulation de données - à remplacer par un appel API\r\n    const mockActions = [\r\n      { id: 1, title: 'Journée de nettoyage', date: '2024-09-15', status: 'planned' },\r\n      { id: 2, title: 'Atelier recyclage', date: '2024-09-22', status: 'planned' },\r\n      { id: 3, title: 'Collecte de vêtements', date: '2024-10-05', status: 'planned' },\r\n      { id: 4, title: 'Conférence sur le développement durable', date: '2024-10-12', status: 'planned' }\r\n    ];\r\n    setActions(mockActions);\r\n  }, []);\r\n\r\n  const months = [\r\n    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',\r\n    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'\r\n  ];\r\n\r\n  const years = [2024, 2025];\r\n\r\n  const filteredActions = actions.filter(action => {\r\n    const actionDate = new Date(action.date);\r\n    return actionDate.getMonth() === selectedMonth && \r\n           actionDate.getFullYear() === selectedYear;\r\n  });\r\n\r\n  return (\r\n    <div className=\"planning\">\r\n      <h1>Planning des Actions RSE</h1>\r\n      \r\n      <div className=\"planning-controls\">\r\n        <select \r\n          value={selectedMonth} \r\n          onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n        >\r\n          {months.map((month, index) => (\r\n            <option key={index} value={index}>{month}</option>\r\n          ))}\r\n        </select>\r\n        \r\n        <select \r\n          value={selectedYear} \r\n          onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n        >\r\n          {years.map(year => (\r\n            <option key={year} value={year}>{year}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"calendar\">\r\n        {filteredActions.length > 0 ? (\r\n          filteredActions.map(action => (\r\n            <div key={action.id} className=\"calendar-event\">\r\n              <div className=\"event-date\">\r\n                {new Date(action.date).getDate()} {months[selectedMonth]}\r\n              </div>\r\n              <div className=\"event-details\">\r\n                <h3>{action.title}</h3>\r\n                <span className={`event-status ${action.status}`}>\r\n                  {action.status === 'planned' ? 'Planifiée' : \r\n                   action.status === 'in-progress' ? 'En cours' : 'Terminée'}\r\n                </span>\r\n                <Link to={`/action/${action.id}`} className=\"event-link\">Voir détails</Link>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>Aucune action planifiée pour cette période.</p>\r\n        )}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planning;  */ "],"mappings":"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AAG,kCAA6B,EAACT,MAAM,CAACpC,aAAa,CAAC,EAAC,GAAC,EAACI,YAAY,EAAC,GAAC;QAAA;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAC3E;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA,eACN,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClD,EAAA,CA5JID,QAAQ;AAAAsE,EAAA,GAARtE,QAAQ;AA8Jd,eAAeA,QAAQ;;AASvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}